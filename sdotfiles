#!/bin/bash

# ____       _   _         
#|  _ \ __ _| |_| |__  ___ 
#| |_) / _` | __| '_ \/ __|
#|  __/ (_| | |_| | | \__ \
#|_|   \__,_|\__|_| |_|___/
#                          
DOTFILES="$HOME/ansible"
DOTFILES_LOG="$HOME/.dotfiles.log"
SSH_DIR="$HOME/.ssh"
VAULT_SECRET="$HOME/.ansible/vault.secret"

# _____         _        
#|_   _|_ _ ___| | _____ 
#  | |/ _` / __| |/ / __|
#  | | (_| \__ \   <\__ \
#  |_|\__,_|___/_|\_\___/
#                        
# color codes
RESTORE='\033[0m'
NC='\033[0m'
BLACK='\033[00;30m'
RED='\033[00;31m'

GREEN='\033[00;32m'
YELLOW='\033[00;33m'

BLUE='\033[00;34m'
PURPLE='\033[00;35m'
CYAN='\033[00;36m'
SEA="\\033[38;5;49m"
LIGHTGRAY='\033[00;37m'
LBLACK='\033[01;30m'
LRED='\033[01;31m'
LGREEN='\033[01;32m'
LYELLOW='\033[01;33m'

LBLUE='\033[01;34m'
LPURPLE='\033[01;35m'
LCYAN='\033[01;36m'
WHITE='\033[01;37m'

OVERWRITE='\e[1A\e[K'

#emoji codes
CHECK_MARK="${GREEN}\xE2\x9C\x94${NC}"
X_MARK="${RED}\xE2\x9C\x96${NC}"
PIN="${RED}\xF0\x9F\x93\x8C${NC}"
CLOCK="${GREEN}\xE2\x8C\x9B${NC}"
ARROW="${SEA}\xE2\x96\xB6${NC}"
BOOK="${RED}\xF0\x9F\x93\x8B${NC}"
HOT="${ORANGE}\xF0\x9F\x94\xA5${NC}"

WARNING="${RED}\xF0\x9F\x9A\xA8${NC}"

RIGHT_ANGLE="${GREEN}\xE2\x88\x9F${NC}"

set -e

# _header colorize the given argument with spacing
function __task {
    # if _task is called while a task was set, complete the previous
    if [[ $TASK != "" ]]; then
        printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
    fi

    # set new task title and print
    TASK=$1
    printf "${LBLACK} [ ]  ${TASK} \n${LRED}"
}

# _cmd performs commands with error checking
function _cmd {
    #create log if it doesn't exist
    if ! [[ -f $DOTFILES_LOG ]]; then
        touch $DOTFILES_LOG
    fi

    # empty conduro.log
    > $DOTFILES_LOG

    # hide stdout, on error we print and exit
    if eval "$1" 1> /dev/null 2> $DOTFILES_LOG; then
        return 0 # success
    fi
    # read error from log and add spacing
    printf "${OVERWRITE}${LRED} [X]  ${TASK}${LRED}\n"

    while read line; do
        printf "      ${line}\n"
    done < $DOTFILES_LOG

    printf "\n"

    # remove log file
    rm $DOTFILES_LOG

    # exit installation
    exit 1
}

function _clear_task {
  TASK=""
}

function _task_done {
  printf "${OVERWRITE}${LGREEN} [✓]  ${LGREEN}${TASK}\n"
  _clear_task
}
function ubuntu_setup() {

  if ! dpkg -s git >/dev/null 2>&1; then
    __task "Installing Git"
    _cmd "apt update"
    _cmd "apt install -y git"
    _task_done
  fi
}

ubuntu_setup

# ____ ____  _   _ 
#/ ___/ ___|| | | |
#\___ \___ \| |_| |
# ___) |__) |  _  |
#|____/____/|_| |_|
#                  
if ! [[ -f "$SSH_DIR/authorized_keys" ]]; then
    __task "Generating SSH keys"
    _cmd "mkdir -p $SSH_DIR"
    _cmd "chmod 700 $SSH_DIR"
    _cmd "ssh-keygen -t ed25519 -f $SSH_DIR/ed25519 -N '' -C $USER@$HOSTNAME"
    _cmd "cat $SSH_DIR/ed25519.pub >> $SSH_DIR/authorized_keys"
    _task_done
fi

# ____        _    __ _ _           
#|  _ \  ___ | |_ / _(_) | ___  ___ 
#| | | |/ _ \| __| |_| | |/ _ \/ __|
#| |_| | (_) | |_|  _| | |  __/\__ \
#|____/ \___/ \__|_| |_|_|\___||___/
#                                   
if ! [[ -d "$DOTFILES" ]]; then
    __task "Cloning Dotfiles repository"
    _cmd "git clone --quiet https://github.com/aasalim/ansible.git $DOTFILES"
    _task_done
fi

ansible-playbook --vault-password-file $VAULT_SECRET "$DOTFILES/main.yml" "$@"

